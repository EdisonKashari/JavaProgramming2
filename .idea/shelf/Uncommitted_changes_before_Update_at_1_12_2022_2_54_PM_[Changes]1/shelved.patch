Index: untitled/untitled.iml
===================================================================
diff --git a/untitled/untitled.iml b/untitled/untitled.iml
deleted file mode 100644
--- a/untitled/untitled.iml	
+++ /dev/null	
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: OfficeHour/day_05_01_12_2022/CustomClass/CustomMain.java
===================================================================
diff --git a/OfficeHour/day_05_01_12_2022/CustomClass/CustomMain.java b/OfficeHour/day_05_01_12_2022/CustomClass/CustomMain.java
new file mode 100644
--- /dev/null	
+++ b/OfficeHour/day_05_01_12_2022/CustomClass/CustomMain.java	
@@ -0,0 +1,66 @@
+package day_05_01_12_2022.CustomClass;
+
+public class CustomMain {
+
+    public static void main(String[] args) {
+        /*
+        What is OBJECT?
+            - Instance of Class
+            - Objects has its own memory
+            - We can not create OBJECT without Class
+
+            Car             c               =               new                              Car();
+         Class         Object                              keyword to create Object        Constructor
+         */
+
+
+        // Create a OBJECT CustomClass
+
+        CustomClassIntro c=new CustomClassIntro();
+        System.out.println("c = " + c);
+        System.out.println("================");
+
+        // Call instance Variable
+        c.instanceVariable="Instance Variable From Main Class";
+        System.out.println("c = " + c);
+        System.out.println("================");
+// Call setInfo
+        c.setInfo("Instance Variable From SetInfo");
+        System.out.println("c = " + c);
+        System.out.println("================");
+
+        // Call staticVariable
+        CustomClassIntro.staticVariable="Static Variable From Main Class via ClassName";
+        //c.staticVariable="Static Variable From Main Class via Object";
+        System.out.println("c = " + c);
+        System.out.println("================");
+
+        // Call staticmethod
+        CustomClassIntro.staticMethod();
+        System.out.println("c = " + c);
+        System.out.println("================");
+
+        // Call instanceMethod
+        c.instanceMethod();
+        System.out.println("c = " + c);
+        System.out.println("================");
+
+        // Create new Object
+        CustomClassIntro c1=new CustomClassIntro();
+        System.out.println("c = " + c1);
+        System.out.println("================");
+
+        // Create new Object
+        CustomClassIntro c2=new CustomClassIntro();
+        System.out.println("c = " + c2);
+        System.out.println("================");
+
+
+        CustomClassIntro.staticVariable="Last value from Main Class";
+        System.out.println("c = " + c);
+        System.out.println("c1 = " + c1);
+        System.out.println("c2 = " + c2);
+
+    }
+    }
+
Index: OfficeHour/day_05_01_12_2022/CustomClass/CustomClassIntro.java
===================================================================
diff --git a/OfficeHour/day_05_01_12_2022/CustomClass/CustomClassIntro.java b/OfficeHour/day_05_01_12_2022/CustomClass/CustomClassIntro.java
new file mode 100644
--- /dev/null	
+++ b/OfficeHour/day_05_01_12_2022/CustomClass/CustomClassIntro.java	
@@ -0,0 +1,109 @@
+package day_05_01_12_2022.CustomClass;
+
+public class CustomClassIntro {
+    /* CustomClassIntro
+
+            What is Class?
+
+                - Template/ Blueprint for Object
+                - We can create class without Object
+                            Arrays.toString();
+
+         */
+
+    public String instanceVariable;   // null
+
+     /*
+            What is instanceVariable?
+
+                - BELONGS OBJECT
+                - it should be created in class but outside any type of method
+                - They are attributes of Objects
+                - initialization is not mandatory
+                - we can access via Objects
+
+                        Car c = new Car();
+                            c.instanceVariable="";
+                - They can have some access modifier.We are using only public for now
+         */
+
+    public static String staticVariable="it is initlized when class loading";
+
+
+    /*
+    What is staticVariable?
+
+            - BELONGS CLASS
+                - Can be used to refer common of all OBJECTS
+                - Gets memory ONLY ONCE ADVANTAGE
+                - we can access via ClassName.staticVariable  // more professional
+                - if we change value staticVaraibale it will AFFECT all Objects
+    Car c=new Car();
+    Car.staticVariable="BMW";
+
+    Car c1=new Car();
+    Car.staticVariable="Ford";
+                 - Initilization is not Mandatory
+
+
+         */
+    public void setInfo(String instanceVariable){
+        // To set Object attributes
+        this.instanceVariable=instanceVariable;
+
+    }
+
+
+    public void instanceMethod(){
+            /*
+        What is instanceMethod?
+
+                - Instance method can access instance variables/methods ALSO it can access static variables and methods
+                */
+                System.out.println("Instance method is Running");
+        staticVariable="Static Variable From Instance Method";
+        staticMethod();
+        instanceVariable="Instance Variable From Instance Method";
+
+        String localVariable="Local Variable From Instance Method";
+        System.out.println("localVariable = " + localVariable);
+            /*
+        What is localVariable?
+
+                - BELONGS METHOD
+                - Defined inside Method
+        - Exist only related Method
+                - We can not use access modifier for local variables
+            */
+
+
+    }
+
+    public static void staticMethod() {
+        System.out.println("Static Method is running");
+        staticVariable="Static Variable From Static MEthod";
+     /*   // instanceVariable;   Compiler ERROR
+        //  instanceMethod();
+                /
+        What is static variable?
+
+        - We can call it via ClassName.staticMethod
+                - We can not use instance variable/methods
+
+                */
+    }
+
+    @Override
+    public String toString() {
+        return "CustomClassIntro{" +
+                "instanceVariable='" + instanceVariable + '\'' +
+        ", staticVariable='" + staticVariable + '\'' +
+        '}';
+
+
+
+        // to get info about OBJECT
+    }
+
+
+}
Index: OfficeHour/day_05_01_12_2022/AccesModifier/AccesModifier_.java
===================================================================
diff --git a/OfficeHour/day_05_01_12_2022/AccesModifier/AccesModifier_.java b/OfficeHour/day_05_01_12_2022/AccesModifier/AccesModifier_.java
new file mode 100644
--- /dev/null	
+++ b/OfficeHour/day_05_01_12_2022/AccesModifier/AccesModifier_.java	
@@ -0,0 +1,18 @@
+package day_05_01_12_2022.AccesModifier;
+
+import day_27_WrapperClasses.WrapperClassesIntro;
+
+public class AccesModifier_ {
+    public static void main(String[] args) {
+
+        Person person =new Person();
+
+        person.ID=25;
+        person.name = "Palina";
+        person.lastName="Ivankiu";
+
+
+
+
+    }
+}
Index: OfficeHour/day_05_01_12_2022/AccesModifier/Person.java
===================================================================
diff --git a/OfficeHour/day_05_01_12_2022/AccesModifier/Person.java b/OfficeHour/day_05_01_12_2022/AccesModifier/Person.java
new file mode 100644
--- /dev/null	
+++ b/OfficeHour/day_05_01_12_2022/AccesModifier/Person.java	
@@ -0,0 +1,10 @@
+package day_05_01_12_2022.AccesModifier;
+
+public class Person {
+
+    public String name;
+    private int age;
+    int ID;
+    protected String lastName;
+
+}
